package songLibrary;


import java.io.IOException;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;

import songLibrary.view.*;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.BorderPane;
import javafx.stage.Modality;
import javafx.stage.Stage;
import songLibrary.model.Song;
import songLibrary.model.SongListWrapper;
import songLibrary.view.SongEditDialogController;
import songLibrary.view.SongOverviewController;

public class MainApp extends Application {

    private Stage primaryStage;
    private BorderPane rootLayout;
    
    /**
     * The data as an observable list of Songs.*/
     
    private ObservableList<Song> songData = FXCollections.observableArrayList();


    public MainApp() {
        // Add some sample data
        songData.add(new Song("Sun Models"));
        songData.add(new Song("You've Got A Friend in Me"));
        songData.add(new Song("Thats Life"));
        songData.add(new Song("Frosty The Snowman"));
        songData.add(new Song("Machine Gun Funk"));
        songData.add(new Song("Dirty Pop"));
        songData.add(new Song("Thriller"));
        songData.add(new Song("Sweet Home Alabama"));
        songData.add(new Song("Hello"));
    }

    
     /* Returns the data as an observable list of Songs. 
     * @return */
     
    public ObservableList<Song> getSongData() {
        return songData;
    }

    @Override
    public void start(Stage primaryStage) {
        this.primaryStage = primaryStage;
        this.primaryStage.setTitle("Song Library");

        initRootLayout();

        showSongOverview();
    }

    /**
     * Initializes the root layout and tries to load the last opened
     * Song file.
     */
    public void initRootLayout() {
        try {
            // Load root layout from fxml file.
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(MainApp.class
                    .getResource("view/RootLayout.fxml"));
            rootLayout = (BorderPane) loader.load();

            // Show the scene containing the root layout.
            Scene scene = new Scene(rootLayout);
            primaryStage.setScene(scene);

            // Give the controller access to the main app.
            RootLayoutController controller = loader.getController();
            controller.setMainApp(this);

            primaryStage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Try to load last opened Song file.
        File file = getSongFilePath();
        if (file != null) {
            loadPersonDataFromFile(file);
        }
    }

    
   public void showSongOverview() {
        try {
            // Load Song overview.
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(MainApp.class.getResource("view/SongOverview.fxml"));
            AnchorPane songOverview = (AnchorPane) loader.load();

            // Set song overview into the center of root layout.
            rootLayout.setCenter(songOverview);

            // Give the controller access to the main app.
            SongOverviewController controller = loader.getController();
            controller.setMainApp(this);
            

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
   
   /**
    * Opens a dialog to edit details for the specified song. If the user
    * clicks OK, the changes are saved into the provided song object and true
    * is returned.
    * 
    * @param song the song object to be edited
    * @return true if the user clicked OK, false otherwise.
    */
   public boolean showSongEditDialog(Song song) {
       try {
           // Load the fxml file and create a new stage for the popup dialog.
           FXMLLoader loader = new FXMLLoader();
           loader.setLocation(MainApp.class.getResource("view/SongEditDialog.fxml"));
           AnchorPane page = (AnchorPane) loader.load();

           // Create the dialog Stage.
           Stage dialogStage = new Stage();
           dialogStage.setTitle("Edit Song");
           dialogStage.initModality(Modality.WINDOW_MODAL);
           dialogStage.initOwner(primaryStage);
           Scene scene = new Scene(page);
           dialogStage.setScene(scene);

           // Set the song into the controller.
           SongEditDialogController controller = loader.getController();
           controller.setDialogStage(dialogStage);
           controller.setSong(song);

           // Show the dialog and wait until the user closes it
           dialogStage.showAndWait();

           return controller.isOkClicked();
       } catch (IOException e) {
           e.printStackTrace();
           return false;
       }
   }
   
   
   /**
    * Returns the Song file preference, i.e. the file that was last opened.
    * The preference is read from the OS specific registry. If no such
    * preference can be found, null is returned.
    * 
    * @return
    */
   public File getSongFilePath() {
       Preferences prefs = Preferences.userNodeForPackage(MainApp.class);
       String filePath = prefs.get("filePath", null);
       if (filePath != null) {
           return new File(filePath);
       } else {
           return null;
       }
   }

   /**
    * Sets the file path of the currently loaded file. The path is persisted in
    * the OS specific registry.
    * 
    * @param file the file or null to remove the path
    */
   public void setSongFilePath(File file) {
       Preferences prefs = Preferences.userNodeForPackage(MainApp.class);
       if (file != null) {
           prefs.put("filePath", file.getPath());

           // Update the stage title.
           primaryStage.setTitle("Song Library - " + file.getName());
       } else {
           prefs.remove("filePath");

           // Update the stage title.
           primaryStage.setTitle("Song Library");
       }
   }
   
   
   /**
    * Loads Song data from the specified file. The current Song data will
    * be replaced.
    * 
    * @param file
    */
   public void loadSongDataFromFile(File file) {
       try {
           JAXBContext context = JAXBContext
                   .newInstance(SongListWrapper.class);
           Unmarshaller um = context.createUnmarshaller();

           // Reading XML from the file and unmarshalling.
           SongListWrapper wrapper = (SongListWrapper) um.unmarshal(file);

           songData.clear();
           songData.addAll(wrapper.getSongs());

           // Save the file path to the registry.
           setSongFilePath(file);

       } catch (Exception e) { // catches ANY exception
           Alert alert = new Alert(AlertType.ERROR);
           alert.setTitle("Error");
           alert.setHeaderText("Could not load data");
           alert.setContentText("Could not load data from file:\n" + file.getPath());

           alert.showAndWait();
       }
   }

   /**
    * Saves the current Song data to the specified file.
    * 
    * @param file
    */
   public void saveSongDataToFile(File file) {
       try {
           JAXBContext context = JAXBContext
                   .newInstance(SongListWrapper.class);
           Marshaller m = context.createMarshaller();
           m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

           // Wrapping our Song data.
           SongListWrapper wrapper = new SongListWrapper();
           wrapper.setSongs(songData);

           // Marshalling and saving XML to the file.
           m.marshal(wrapper, file);

           // Save the file path to the registry.
           setSongFilePath(file);
       } catch (Exception e) { // catches ANY exception
           Alert alert = new Alert(AlertType.ERROR);
           alert.setTitle("Error");
           alert.setHeaderText("Could not save data");
           alert.setContentText("Could not save data to file:\n" + file.getPath());

           alert.showAndWait();
       }
   }
   




    /**
     * Returns the main stage.
     * @return
     */
    public Stage getPrimaryStage() {
        return primaryStage;
    }

    public static void main(String[] args) {
        launch(args);
    }
}